{"version":3,"sources":["firebase.js","EntryForm/EntryForm.js","NewEntryForm/NewEntryForm.js","Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","EntryForm","entry","React","useState","content","setContent","className","value","onChange","event","target","onClick","firestore","collection","doc","id","set","delete","NewEntryForm","newEntry","setNewEntry","add","Header","App","entries","setEntries","useEffect","onSnapshot","snapshot","fetchedEntries","forEach","push","data","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6WAaAA,IAASC,cAXc,CACrBC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjBT,IAASU,YAEMV,QAAf,ECZaW,G,MAAY,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EAENC,IAAMC,SAASF,EAAMG,SAFf,mBAE7BA,EAF6B,KAEpBC,EAFoB,KAcpC,OACI,yBAAKC,UAAU,kBAEX,8BAAUA,UAAU,QAAQC,MAAOH,EAASI,SAAU,SAACC,GACnDJ,EAAWI,EAAMC,OAAOH,UAE5B,yBAAKD,UAAU,gBACX,4BAAQA,UAAU,UAAUK,QAjBzB,WACAtB,EAASuB,YACjBC,WAAW,WAAWC,IAAIb,EAAMc,IAAIC,IAAvC,2BAAgDf,GAAhD,IAAuDG,eAe/C,UACA,4BAAQE,UAAU,SAASK,QAbtB,WACFtB,EAASuB,YACjBC,WAAW,WAAWC,IAAIb,EAAMc,IAAIE,WAW/B,cCtBHC,G,MAAe,WAAO,IAAD,EAEEhB,IAAMC,SAAS,IAFjB,mBAEvBgB,EAFuB,KAEbC,EAFa,KAS9B,OACI,yBAAKd,UAAU,UACX,yBAAKA,UAAU,gBACX,2BAAOA,UAAU,YAAYC,MAAOY,EAAUX,SAAW,SAAAC,GAAK,OAAIW,EAAYX,EAAMC,OAAOH,UAC3F,4BAAQD,UAAU,UAAUK,QATvB,WACFtB,EAASuB,YACjBC,WAAW,WAAWQ,IAAI,CAAEjB,QAASe,MAOhC,Y,MCJDG,MATf,WACI,OACI,4BAAQhB,UAAU,UACd,yBAAKA,UAAU,SACX,yDC6BDiB,MA9Bf,WAAgB,IAAD,EAEiBrB,IAAMC,SAAS,IAFhC,mBAENqB,EAFM,KAEGC,EAFH,KAmBb,OAfAvB,IAAMwB,WAAU,WAEHrC,EAASuB,YAAYC,WAAW,WAExCc,YAAW,SAAAC,GACZ,IAAMC,EAAiB,GAEvBD,EAASE,SAAQ,SAAAhB,GACfe,EAAeE,KAAf,2BAAyBjB,EAAIkB,QAA7B,IAAqCjB,GAAID,EAAIC,SAE/CU,EAAWI,QAGZ,IAGD,6BACE,kBAAC,EAAD,MACCL,EAAQS,KAAI,SAAAhC,GAAK,OAChB,kBAAC,EAAD,CAAWA,MAAOA,EAAOiC,IAAKjC,EAAMc,QAEtC,kBAAC,EAAD,QCpBcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.77108fdd.chunk.js","sourcesContent":["import firebase from 'firebase'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC9ejpZlLRneFLphRn2Ndf0ozpaPsuiUKg\",\n  authDomain: \"react-journal-63978.firebaseapp.com\",\n  databaseURL: \"https://react-journal-63978.firebaseio.com\",\n  projectId: \"react-journal-63978\",\n  storageBucket: \"react-journal-63978.appspot.com\",\n  messagingSenderId: \"706166685869\",\n  appId: \"1:706166685869:web:d63769f63ae7d2a63dc624\",\n  measurementId: \"G-PECSPY0YG1\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport default firebase;","import React from 'react'\nimport firebase from '../firebase'\nimport './EntryForm.css'\n\nexport const EntryForm = ({ entry }) => {\n\n    const [content, setContent] = React.useState(entry.content)\n\n    const onEdit = () => {\n        const db = firebase.firestore();\n        db.collection('entries').doc(entry.id).set({ ...entry, content })\n    }\n\n    const onDelete = () => {\n        const db = firebase.firestore();\n        db.collection('entries').doc(entry.id).delete()\n    }\n\n    return (\n        <div className='entryContainer' >\n\n            <textarea className='entry' value={content} onChange={(event) => {\n                setContent(event.target.value)\n            }} />\n            <div className='entryOptions'>\n                <button className='editBtn' onClick={onEdit}>Update</button>\n                <button className='delBtn' onClick={onDelete}>Delete</button>\n            </div>\n\n        </div>\n    )\n}","import React from 'react'\nimport firebase from '../firebase'\nimport './NewEntryForm.css'\n\nexport const NewEntryForm = () => {\n\n    const [newEntry, setNewEntry] = React.useState([])\n\n    const onCreate = () => {\n        const db = firebase.firestore();\n        db.collection('entries').add({ content: newEntry })\n    }\n\n    return (\n        <div className='footer'>\n            <div className=\"inputWrapper\">\n                <input className='postInput' value={newEntry} onChange={(event => setNewEntry(event.target.value))} />\n                <button className='postBtn' onClick={onCreate}>Post</button>\n            </div>\n        </div>\n    )\n\n}\n\n\n","import React from 'react'\nimport './Header.css'\n\n\nfunction Header() {\n    return (\n        <header className='Header'>\n            <div className='title'>\n                <h1>React-Firebase-Journal</h1>\n            </div>\n        </header>\n    )\n}\nexport default Header\n","import React from 'react';\nimport './App.css';\nimport firebase from './firebase'\nimport { EntryForm } from './EntryForm/EntryForm'\nimport { NewEntryForm } from './NewEntryForm/NewEntryForm'\nimport Header from './Header/Header'\n\nfunction App() {\n\n  const [entries, setEntries] = React.useState([])\n\n  React.useEffect(() => {\n\n    const db = firebase.firestore().collection('entries')\n\n    db.onSnapshot(snapshot => {\n      const fetchedEntries = []\n\n      snapshot.forEach(doc => {\n        fetchedEntries.push({ ...doc.data(), id: doc.id })\n      })\n      setEntries(fetchedEntries)\n    })\n\n  }, [])\n\n  return (\n    <div>\n      <Header />\n      {entries.map(entry => (\n        <EntryForm entry={entry} key={entry.id} />\n      ))}\n      <NewEntryForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}